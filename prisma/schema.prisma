generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             String         @id @default(cuid())
  nombre         String
  correo         String         @unique
  contrasena     String
  oficinaId      Int
  areaId         Int
  rolId          Int
  activo         Boolean        @default(true)
  lastModifiedBy String?
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
  area           Area           @relation(fields: [areaId], references: [id])
  oficina        Oficina        @relation(fields: [oficinaId], references: [id])
  rol            Role           @relation(fields: [rolId], references: [id])
  aceptaciones   Aceptacion[]
  comentarios    Comentario[]
  proyectos      Proyecto[]
  pregunta       Ticket[]       @relation("UsuarioPregunta")
  responder      Ticket[]       @relation("UsuarioRespuesta")
  clientes       UsuarioCliente[] 
  aceptacionAnual AceptacionAnual[]
  // cuestionarios  Cuestionario[]
}

model Role {
  id        Int       @id @default(autoincrement())
  nombre    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usuarios  Usuario[]
}

model Oficina {
  id        Int        @id @default(autoincrement())
  nombre    String
  direccion String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  areas     Area[]
  proyectos Proyecto[]
  usuarios  Usuario[]
}

model Proyecto {
  id            Int            @id @default(autoincrement())
  usuarioId     String
  areaId        Int
  oficinaId     Int
  nombre        String
  descripcion   String
  estado        estadoProyecto @default(NUEVO)
  fechaInicio   DateTime
  fechaFin      DateTime?
  clienteId     Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  area          Area           @relation(fields: [areaId], references: [id])
  cliente       Cliente        @relation(fields: [clienteId], references: [id])
  oficina       Oficina        @relation(fields: [oficinaId], references: [id])
  usuario       Usuario        @relation(fields: [usuarioId], references: [id])
  cuestionarios Cuestionario[]
  respuestas    Respuesta[]
}

model Cuestionario {
  id                Int                @id @default(autoincrement())
  proyectoId        Int
  estado            estadoCuestionario @default(EN_ESPERA)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  proyecto          Proyecto           @relation(fields: [proyectoId], references: [id])
  Preguntas         Pregunta[]
  usuariosAsignados Json
}

model Pregunta {
  id                 Int          @id @default(autoincrement())
  cuestionarioId     Int
  pregunta           String
  preguntaPadre      Int?
  posicion           Int?
  tipo               tipoPregunta @default(TEXTO)
  valorAnidado       String?
  posiblesRespuestas Json?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  cuestionario       Cuestionario @relation(fields: [cuestionarioId], references: [id], onDelete: Cascade)
  preguntaAnidada    Pregunta?    @relation("PreguntaAnidada", fields: [preguntaPadre], references: [id], onDelete: NoAction, onUpdate: NoAction)
  preguntaHijo       Pregunta[]   @relation("PreguntaAnidada")
}

model Respuesta {
  id         Int      @id @default(autoincrement())
  proyectoId Int
  respuesta  String
  fecha      DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  proyecto   Proyecto @relation(fields: [proyectoId], references: [id])
}

model Ticket {
  id                 Int          @id @default(autoincrement())
  usuarioPreguntaId  String
  usuarioRespuestaId String?
  titulo             String
  descripcion        String
  estado             String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  usuarioPregunta    Usuario      @relation("UsuarioPregunta", fields: [usuarioPreguntaId], references: [id])
  usuarioRespuesta   Usuario?     @relation("UsuarioRespuesta", fields: [usuarioRespuestaId], references: [id])
  comentarios        Comentario[]
}

model Area {
  id        Int        @id @default(autoincrement())
  nombre    String
  oficinaId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  oficina   Oficina    @relation(fields: [oficinaId], references: [id])
  proyectos Proyecto[]
  usuarios  Usuario[]
}

model Comentario {
  id         Int      @id @default(autoincrement())
  usuarioId  String
  ticketId   Int
  comentario String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
}

model Aceptacion {
  id        Int      @id @default(autoincrement())
  usuarioId String
  file      String
  ticketId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model Cliente {
  id          Int         @id @default(autoincrement())
  nombre      String
  correo      String      @unique
  telefono    String
  domicilio   String
  tipoPersona String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  proyectos   Proyecto[]
  usuarios    UsuarioCliente[]
}

// Definición de la relación muchos a muchos
model UsuarioCliente {
  id        Int      @id @default(autoincrement())
  clienteId Int
  usuarioId String

  cliente   Cliente  @relation(fields: [clienteId], references: [id])
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  @@unique([clienteId, usuarioId], name: "UniqueUserCliente")
}

model AceptacionAnual {
  id        Int      @id @default(autoincrement())
  year     Int
  estadoAceptacion estadoAceptacion @default(EN_ESPERA)
  usuarioId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

enum estadoAceptacion {
  ACEPTADO
  RECHAZADO
  EN_ESPERA
}

enum estadoProyecto {
  NUEVO
  EN_PROGRESO
  FINALIZADO
}

enum estadoCuestionario {
  EN_ESPERA
  APROBADO
  RECHAZADO
}

enum tipoPregunta {
  SELECCION_UNICA
  SELECCION_MULTIPLE
  TEXTO
  FECHA
  BOOLEANO
}

enum TipoPersona {
  FISICA
  MORAL
}

